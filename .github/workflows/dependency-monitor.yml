name: Dependency Monitor

on:
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      manual_trigger:
        description: 'Manual dependency check'
        required: false
        default: 'true'

env:
  NODE_VERSION: '20'

jobs:
  dependency-check:
    name: Check External Dependencies
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Make script executable
        run: chmod +x scripts/check-dependencies.sh
      
      - name: Run dependency check
        id: run_check
        run: |
          ./scripts/check-dependencies.sh | tee dependency-status.log
          STATUS=$(grep "Overall:" dependency-status.log | awk '{print $2}')
          echo "overall_status=$STATUS" >> $GITHUB_OUTPUT
        env:
          # These will be available if the monitoring endpoint is deployed
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      
      - name: Check overall status
        id: status_check
        run: |
          STATUS=${{ steps.run_check.outputs.overall_status }}
          echo "overall_status=$STATUS" >> $GITHUB_OUTPUT
          
          if [ "$STATUS" = "unhealthy" ]; then
            echo "‚ùå Critical dependency issues detected!"
            exit 1
          elif [ "$STATUS" = "degraded" ]; then
            echo "‚ö†Ô∏è Some dependencies are degraded"
            exit 0
          else
            echo "‚úÖ All dependencies healthy"
            exit 0
          fi
      
      - name: Create issue on failure
        if: failure() && github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'dependency-issue'
            });
            
            if (issues.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'üö® Critical Dependency Issues Detected',
                body: `## Dependency Status Alert
                
                **Status:** ${{ steps.run_check.outputs.overall_status }}
                **Time:** ${new Date().toISOString()}
                **Workflow:** [Dependency Monitor](${context.payload.repository.html_url}/actions/runs/${context.runId})
                
                ### Next Steps:
                1. Check the [dependency monitoring logs](${context.payload.repository.html_url}/actions/runs/${context.runId})
                2. Review external service status pages
                3. Update monitoring thresholds if needed
                4. Close this issue when resolved
                
                ---
                *This issue was automatically created by the Dependency Monitor workflow.*`,
                labels: ['dependency-issue', 'automated', 'critical']
              });
            }
      
      - name: Comment on existing issue
        if: success() && github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'dependency-issue'
            });
            
            for (const issue of issues) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `‚úÖ **Dependencies are now healthy!**
                
                **Status:** ${{ steps.run_check.outputs.overall_status }}
                **Time:** ${new Date().toISOString()}
                **Workflow:** [Dependency Monitor](${context.payload.repository.html_url}/actions/runs/${context.runId})
                
                This issue can now be closed.`
              });
              
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                state: 'closed'
              });
            }
