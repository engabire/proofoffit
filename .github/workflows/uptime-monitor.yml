name: Uptime Monitor

on:
  schedule:
    # Run every 5 minutes
    - cron: '*/5 * * * *'
  workflow_dispatch:

jobs:
  uptime-check:
    name: Uptime Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Check application health
        run: |
          echo "Checking application health..."
          BASE_URL="https://www.proofoffit.com"
          HEALTH_URL="$BASE_URL/api/health"

          # Check health endpoint
          HEALTH_RESPONSE=$(curl -s -L -o /dev/null -w "%{http_code}" "$HEALTH_URL")

          if [ "$HEALTH_RESPONSE" = "200" ]; then
            echo "✅ Application is healthy (HTTP $HEALTH_RESPONSE)"
            HEALTH_STATUS="healthy"
          else
            echo "❌ Application is unhealthy (HTTP $HEALTH_RESPONSE)"
            HEALTH_STATUS="unhealthy"
          fi

          # Get detailed health data
          HEALTH_DATA=$(curl -s -L "$HEALTH_URL")
          echo "Health data: $HEALTH_DATA"

          if echo "$HEALTH_DATA" | jq empty >/dev/null 2>&1; then
            RESPONSE_TIME=$(echo "$HEALTH_DATA" | jq -r '.response_time_ms // empty')
            if [ -z "$RESPONSE_TIME" ]; then
              RESPONSE_TIME="null"
            fi

            DB_STATUS=$(echo "$HEALTH_DATA" | jq -r '.services.database.status // "unknown"')
            AUTH_STATUS=$(echo "$HEALTH_DATA" | jq -r '.services.authentication.status // "unknown"')
            STORAGE_STATUS=$(echo "$HEALTH_DATA" | jq -r '.services.storage.status // "unknown"')
          else
            echo "⚠️ Health endpoint did not return valid JSON; using fallback metrics."
            RESPONSE_TIME="null"
            DB_STATUS="unknown"
            AUTH_STATUS="unknown"
            STORAGE_STATUS="unknown"
          fi

          if [ "$RESPONSE_TIME" = "null" ]; then
            echo "Response time: unknown"
          else
            echo "Response time: ${RESPONSE_TIME}ms"
          fi
          echo "Database status: $DB_STATUS"
          echo "Authentication status: $AUTH_STATUS"
          echo "Storage status: $STORAGE_STATUS"

          # Log to Supabase for monitoring
          curl -X POST "$BASE_URL/api/monitoring/uptime" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.MONITORING_TOKEN }}" \
            -d "{
              \"status\": \"$HEALTH_STATUS\",
              \"response_time_ms\": $RESPONSE_TIME,
              \"database_status\": \"$DB_STATUS\",
              \"auth_status\": \"$AUTH_STATUS\",
              \"storage_status\": \"$STORAGE_STATUS\",
              \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"
            }" || echo "Failed to log to monitoring endpoint"
      
      - name: Alert on failure
        if: failure()
        run: |
          echo "🚨 Uptime check failed!"
          echo "Application appears to be down or unhealthy"
          echo "Please check the application status immediately"
          
          # Send alert (implement your alerting mechanism)
          # curl -X POST "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK" \
          #   -H "Content-Type: application/json" \
          #   -d '{"text":"🚨 ProofOfFit application is down!"}'
      
      - name: Check external dependencies
        run: |
          echo "Checking external dependencies..."

          parse_indicator() {
            local response="$1"
            local value
            value=$(echo "$response" | jq -r '.status.indicator // empty' 2>/dev/null || true)

            if [ -z "$value" ] || [ "$value" = "null" ]; then
              echo "unknown"
            else
              echo "$value"
            fi
          }

          # Check Supabase status
          SUPABASE_RESPONSE=$(curl -s -L https://status.supabase.com/api/v2/status.json || true)
          SUPABASE_STATUS=$(parse_indicator "$SUPABASE_RESPONSE")
          echo "Supabase status: $SUPABASE_STATUS"

          # Check Vercel status
          VERCEL_RESPONSE=$(curl -s -L https://www.vercel-status.com/api/v2/status.json || true)
          VERCEL_STATUS=$(parse_indicator "$VERCEL_RESPONSE")
          echo "Vercel status: $VERCEL_STATUS"

          # Check Stripe status
          STRIPE_RESPONSE=$(curl -s -L https://status.stripe.com/api/v2/status.json || true)
          STRIPE_STATUS=$(parse_indicator "$STRIPE_RESPONSE")
          echo "Stripe status: $STRIPE_STATUS"

          # Log dependency status
          BASE_URL="https://www.proofoffit.com"

          curl -X POST "$BASE_URL/api/monitoring/dependencies" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.MONITORING_TOKEN }}" \
            -d "{
              \"supabase_status\": \"$SUPABASE_STATUS\",
              \"vercel_status\": \"$VERCEL_STATUS\",
              \"stripe_status\": \"$STRIPE_STATUS\",
              \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"
            }" || echo "Failed to log dependency status"

  performance-check:
    name: Performance Check
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
      - name: Performance monitoring
        run: |
          echo "Running performance checks..."

          BASE_URL="https://www.proofoffit.com"

          # Test key endpoints
          ENDPOINTS=(
            "$BASE_URL/"
            "$BASE_URL/api/jobs/search?limit=5"
            "$BASE_URL/api/health"
          )
          
          for endpoint in "${ENDPOINTS[@]}"; do
            echo "Testing $endpoint"

            # Measure response time
            RESPONSE_TIME=$(curl -s -L -o /dev/null -w "%{time_total}" "$endpoint")
            HTTP_CODE=$(curl -s -L -o /dev/null -w "%{http_code}" "$endpoint")
            
            echo "Response time: ${RESPONSE_TIME}s, HTTP code: $HTTP_CODE"
            
            # Log performance data
            curl -X POST "$BASE_URL/api/monitoring/performance" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer ${{ secrets.MONITORING_TOKEN }}" \
              -d "{
                \"endpoint\": \"$endpoint\",
                \"response_time_seconds\": $RESPONSE_TIME,
                \"http_code\": $HTTP_CODE,
                \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"
              }" || echo "Failed to log performance data for $endpoint"
          done
