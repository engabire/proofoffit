import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/db'
import { requireUserId } from '@/lib/auth'

export async function POST(req: NextRequest) {
  try {
    const userId = await requireUserId()
    const { jobId, candidateProfileId } = await req.json()

    if (!jobId || !candidateProfileId) {
      return NextResponse.json(
        { error: 'Job ID and candidate profile ID are required' },
        { status: 400 }
      )
    }

    // Get the job details
    const job = await prisma.job.findUnique({
      where: { id: jobId }
    })

    if (!job) {
      return NextResponse.json(
        { error: 'Job not found' },
        { status: 404 }
      )
    }

    // Check if auto-apply is allowed for this job
    if (!job.tos?.allowed) {
      return NextResponse.json(
        { error: 'Auto-apply not allowed for this job' },
        { status: 403 }
      )
    }

    // Get candidate profile
    const candidateProfile = await prisma.candidateProfile.findUnique({
      where: { id: candidateProfileId },
      include: {
        bullets: true,
        credentials: true,
        artifacts: true
      }
    })

    if (!candidateProfile) {
      return NextResponse.json(
        { error: 'Candidate profile not found' },
        { status: 404 }
      )
    }

    // Generate tailored resume and cover letter
    const tailoredDocuments = await generateTailoredDocuments(
      candidateProfile,
      job
    )

    // Create application record
    const application = await prisma.application.create({
      data: {
        candidateId: candidateProfileId,
        jobId: jobId,
        status: 'submitted',
        documents: tailoredDocuments,
        appliedAt: new Date(),
        source: 'auto-apply',
        metadata: {
          jobSource: job.source,
          autoApplied: true,
          documentsGenerated: true
        }
      }
    })

    // Submit application to external system (if applicable)
    const submissionResult = await submitApplicationToExternalSystem(
      job,
      tailoredDocuments
    )

    // Update application with submission result
    await prisma.application.update({
      where: { id: application.id },
      data: {
        status: submissionResult.success ? 'submitted' : 'failed',
        externalId: submissionResult.externalId,
        metadata: {
          ...application.metadata,
          submissionResult
        }
      }
    })

    return NextResponse.json({
      success: true,
      applicationId: application.id,
      status: submissionResult.success ? 'submitted' : 'failed',
      message: submissionResult.success 
        ? 'Application submitted successfully' 
        : 'Application failed to submit',
      documents: tailoredDocuments
    })

  } catch (error) {
    console.error('Error in auto-apply:', error)
    return NextResponse.json(
      { error: 'Failed to submit application' },
      { status: 500 }
    )
  }
}

async function generateTailoredDocuments(
  candidateProfile: any,
  job: any
): Promise<{ resume: string; coverLetter: string }> {
  // This would integrate with the tailor engine
  // For now, return placeholder documents
  
  const resume = `# ${candidateProfile.user?.email || 'Candidate'} Resume

## Professional Summary
Experienced professional with relevant skills for ${job.title} position at ${job.org}.

## Skills
${candidateProfile.bullets?.map((bullet: any) => `- ${bullet.text}`).join('\n') || 'No skills listed'}

## Experience
${candidateProfile.bullets?.filter((bullet: any) => 
  bullet.tags?.evidence_type === 'experience'
).map((bullet: any) => `- ${bullet.text}`).join('\n') || 'No experience listed'}

## Education
${candidateProfile.credentials?.map((cred: any) => 
  `- ${cred.type} from ${cred.issuer}`
).join('\n') || 'No education listed'}

---
Generated by ProofOfFit for ${job.title} at ${job.org}
`

  const coverLetter = `Dear Hiring Manager,

I am writing to express my strong interest in the ${job.title} position at ${job.org}. 

Based on the job requirements, I believe my background aligns well with what you're looking for:

${job.requirements?.must_have?.map((req: string) => 
  `- ${req}: Relevant experience and skills`
).join('\n') || ''}

I am excited about the opportunity to contribute to ${job.org} and would welcome the chance to discuss how my qualifications can benefit your team.

Best regards,
${candidateProfile.user?.email || 'Candidate'}

---
Generated by ProofOfFit
`

  return { resume, coverLetter }
}

async function submitApplicationToExternalSystem(
  job: any,
  documents: { resume: string; coverLetter: string }
): Promise<{ success: boolean; externalId?: string; error?: string }> {
  try {
    // This would integrate with different job boards based on job.source
    switch (job.source) {
      case 'usajobs':
        return await submitToUSAJobs(job, documents)
      case 'linkedin':
        return await submitToLinkedIn(job, documents)
      case 'indeed':
        return await submitToIndeed(job, documents)
      default:
        return {
          success: false,
          error: `Submission not supported for source: ${job.source}`
        }
    }
  } catch (error) {
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error'
    }
  }
}

async function submitToUSAJobs(
  job: any,
  documents: { resume: string; coverLetter: string }
): Promise<{ success: boolean; externalId?: string; error?: string }> {
  // USAJOBS API integration would go here
  // For now, simulate successful submission
  return {
    success: true,
    externalId: `usajobs-${Date.now()}`
  }
}

async function submitToLinkedIn(
  job: any,
  documents: { resume: string; coverLetter: string }
): Promise<{ success: boolean; externalId?: string; error?: string }> {
  // LinkedIn API integration would go here
  // For now, return not supported
  return {
    success: false,
    error: 'LinkedIn auto-apply not yet implemented'
  }
}

async function submitToIndeed(
  job: any,
  documents: { resume: string; coverLetter: string }
): Promise<{ success: boolean; externalId?: string; error?: string }> {
  // Indeed API integration would go here
  // For now, return not supported
  return {
    success: false,
    error: 'Indeed auto-apply not yet implemented'
  }
}
