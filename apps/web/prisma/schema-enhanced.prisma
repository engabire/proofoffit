// Enhanced Prisma schema incorporating ProofOfFit-2 improvements
// This maintains backward compatibility while adding new features

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enhanced enums from ProofOfFit-2
enum Plan {
  FREE
  PRO
  PREMIUM
}

enum ProofKind {
  link
  file
  repo
  case
}

enum ApplicationStatus {
  draft
  submitted
  review
  interview
  offer
  rejected
}

enum SignalSource {
  self
  assessment
  review
}

enum PackageStatus {
  draft
  active
  revoked
  expired
}

enum ConsentStatus {
  active
  revoked
  expired
}

enum AutoApplyAction {
  submitted
  failed
  skipped
  duplicate
}

// Core tenant and user management (enhanced)
model Tenant {
  id        String   @id @default(cuid())
  name      String
  plan      Plan     @default(FREE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users           User[]
  candidateProfiles CandidateProfile[]
  employerIntakes   EmployerIntake[]
  slates           Slate[]
  applications     Application[]
  consents         Consent[]
  actionLogs       ActionLog[]
  organizations    Organization[]

  @@map("tenants")
}

model User {
  id        String   @id @default(cuid())
  tenantId  String
  email     String   @unique
  role      String   @default("candidate") // candidate, employer, admin
  locale    String   @default("en")
  plan      Plan     @default(FREE)
  stripeCustomerId String?
  stripeSubscriptionId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tenant           Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  candidateProfile CandidateProfile?
  consents         Consent[]
  proofs           Proof[]
  auditLinks       AuditLink[]
  applicationPackages ApplicationPackage[]
  autoApplyRules   AutoApplyRule[]

  @@map("users")
}

// Enhanced Candidate profile with rich metadata
model CandidateProfile {
  id            String   @id @default(cuid())
  tenantId      String
  userId        String   @unique
  displayName   String?
  avatarUrl     String?
  bio           String?
  headline      String?
  linkedinUrl   String?
  githubUrl     String?
  portfolioUrl  String?
  location      String?
  preferences   Json     @default("{}")
  contactPolicy Json     @default("{}")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  tenant       Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  credentials  Credential[]
  bullets      Bullet[]
  artifacts    Artifact[]
  applications Application[]

  @@map("candidate_profiles")
}

// Organizations for employers
model Organization {
  id        String   @id @default(cuid())
  tenantId  String
  name      String
  domain    String?
  website   String?
  logoUrl   String?
  createdAt DateTime @default(now())

  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  jobs   Job[]

  @@map("organizations")
}

// Enhanced Job model (Targets in ProofOfFit-2)
model Job {
  id           String   @id @default(cuid())
  externalId   String?
  source       String   // usajobs, reliefweb, greenhouse, lever, etc.
  org          String
  title        String
  location     String
  workType     String   // remote, hybrid, onsite
  compensationRange String?
  pay          Json?    @default("{}")
  description  String
  requirements Json     @default("{}") // {must_have: [], preferred: []}
  constraints  Json     @default("{}") // {license?, clearance?, language: []}
  tos          Json     @default("{}") // {allowed: boolean, captcha: boolean, notes}
  skills       String[]
  orgId        String?
  createdById  String?
  isActive     Boolean  @default(true)
  fetchedAt    DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  organization   Organization?   @relation(fields: [orgId], references: [id], onDelete: SetNull)
  employerIntakes EmployerIntake[]
  applications    Application[]
  slates          Slate[]

  @@map("jobs")
}

// Enhanced Proof model (formerly Evidence/Artifact)
model Proof {
  id          String    @id @default(cuid())
  userId      String
  kind        ProofKind
  title       String
  url         String?
  description String?
  skills      String[]
  impact      String?
  isPublic    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  targetProofWeights  TargetProofWeight[]
  auditLinkProofs     AuditLinkProof[]
  signals             Signal[]

  @@map("proofs")
}

// Legacy compatibility - Artifact points to Proof
model Artifact {
  id          String   @id @default(cuid())
  candidateId String
  title       String
  url         String
  type        String   // resume, portfolio, cover_letter, etc.
  createdAt   DateTime @default(now())

  // Relations
  candidate CandidateProfile @relation(fields: [candidateId], references: [id], onDelete: Cascade)

  @@map("artifacts")
}

// Enhanced Application model
model Application {
  id          String            @id @default(cuid())
  tenantId    String
  jobId       String
  userId      String
  status      ApplicationStatus @default(draft)
  coverLetter String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  tenant             Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  job                Job                 @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  candidateProfile   CandidateProfile    @relation(fields: [userId], references: [userId], onDelete: Cascade)
  targetProofWeights TargetProofWeight[]
  consentLedger      ConsentLedgerEntry[]

  @@map("applications")
}

// NEW: TargetProofWeight - weighted proof linking
model TargetProofWeight {
  id            String   @id @default(cuid())
  applicationId String
  proofId       String
  weight        Decimal  @default(1.00) @db.Decimal(5, 2)
  notes         String?
  createdAt     DateTime @default(now())

  // Relations
  application Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  proof       Proof       @relation(fields: [proofId], references: [id], onDelete: Cascade)

  @@unique([applicationId, proofId])
  @@map("target_proof_weights")
}

// NEW: AuditLinks - shareable portfolio links
model AuditLink {
  id           String    @id @default(cuid())
  userId       String
  slug         String    @unique
  title        String
  description  String?
  isActive     Boolean   @default(true)
  viewCount    Int       @default(0)
  lastViewedAt DateTime?
  createdAt    DateTime  @default(now())
  expiresAt    DateTime?

  // Relations
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  auditLinkProofs AuditLinkProof[]

  @@map("audit_links")
}

// NEW: AuditLinkProofs - many-to-many relationship
model AuditLinkProof {
  id          String @id @default(cuid())
  auditLinkId String
  proofId     String
  order       Int    @default(0)

  // Relations
  auditLink AuditLink @relation(fields: [auditLinkId], references: [id], onDelete: Cascade)
  proof     Proof     @relation(fields: [proofId], references: [id], onDelete: Cascade)

  @@unique([auditLinkId, proofId])
  @@map("audit_link_proofs")
}

// Enhanced Signals model
model Signal {
  id        String       @id @default(cuid())
  userId    String
  name      String
  level     Int
  source    SignalSource
  proofId   String?
  createdAt DateTime     @default(now())

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  proof Proof? @relation(fields: [proofId], references: [id], onDelete: SetNull)

  @@map("signals")
}

// NEW: Application Packages - versioned application bundles
model ApplicationPackage {
  id                String        @id @default(cuid())
  userId            String
  version           String
  resumeUrl         String?
  coverLetterTemplate String?
  files             String[]
  contentHash       String
  status            PackageStatus @default(draft)
  createdAt         DateTime      @default(now())

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  consents Consent[]

  @@map("application_packages")
}

// Enhanced Consents model
model Consent {
  id                String        @id @default(cuid())
  tenantId          String
  userId            String
  packageId         String
  scopeJson         String
  signatureBlob     String
  signatureProvider String        @default("canvas")
  validFrom         DateTime      @default(now())
  validTo           DateTime?
  status            ConsentStatus @default(active)
  createdAt         DateTime      @default(now())
  revokedAt         DateTime?

  // Relations
  tenant   Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user     User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  package  ApplicationPackage  @relation(fields: [packageId], references: [id], onDelete: Cascade)
  ledger   ConsentLedgerEntry[]

  @@map("consents")
}

// NEW: Consent Ledger - immutable audit trail
model ConsentLedgerEntry {
  id                String         @id @default(cuid())
  userId            String
  packageId         String
  consentId         String
  jobId             String?
  action            AutoApplyAction
  timestamp         DateTime       @default(now())
  applyPayloadHash  String?
  previousHash      String?
  errorMessage      String?
  metadata          String?

  // Relations
  consent Consent @relation(fields: [consentId], references: [id], onDelete: Cascade)
  application Application @relation(fields: [jobId], references: [id], onDelete: SetNull)

  @@map("consent_ledger")
}

// NEW: Auto-Apply Rules
model AutoApplyRule {
  id              String    @id @default(cuid())
  userId          String
  name            String
  scopeJson       String
  weeklyCap       Int       @default(5)
  cooldownSeconds Int       @default(86400) // 24 hours
  enabled         Boolean   @default(false)
  lastRunAt       DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("auto_apply_rules")
}

// Existing models (maintained for backward compatibility)
model Credential {
  id          String   @id @default(cuid())
  candidateId String
  type        String   // degree, certification, license, etc.
  issuer      String
  issuedOn    DateTime?
  verified    Boolean  @default(false)
  docUrl      String?

  // Relations
  candidate CandidateProfile @relation(fields: [candidateId], references: [id], onDelete: Cascade)

  @@map("credentials")
}

model Bullet {
  id          String   @id @default(cuid())
  candidateId String
  text        String
  tags        Json     @default("{}") // {criterion, evidence_type, metric?, scope?, tool?, link?}
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  candidate CandidateProfile @relation(fields: [candidateId], references: [id], onDelete: Cascade)

  @@map("bullets")
}

model EmployerIntake {
  id               String   @id @default(cuid())
  tenantId         String
  jobRef           String
  mustHave         Json     @default("[]")
  preferred        Json     @default("[]")
  preferenceOrder  Json     @default("[]")
  weights          Json     @default("{}")
  constraints      Json     @default("{}")
  terms            Json     @default("{}")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  job    Job    @relation(fields: [jobRef], references: [id], onDelete: Cascade)

  @@map("employer_intakes")
}

model Slate {
  id          String   @id @default(cuid())
  tenantId    String
  jobId       String
  rationale   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  job    Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@map("slates")
}

model ActionLog {
  id        String   @id @default(cuid())
  tenantId  String
  action    String
  details   Json     @default("{}")
  createdAt DateTime @default(now())

  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("action_logs")
}
